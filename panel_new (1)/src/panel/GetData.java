/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package panel;

import java.awt.Color;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Dictionary;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListSet;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import static panel.Setting_S.set;
import static panel.GetUserforVK.count;

/**
 *
 * @author Дима
 */
public class GetData extends javax.swing.JPanel {

    /**
     * Creates new form One
     */
    public GetData(String user) throws IOException {
        initComponents();
        jList1.setModel(listModel);
        if (!user.equals("")) {
            String n[] = user.split(";");
            for (String us : n) {
                String n2[] = us.split("-");
                listModel.addElement(n2[0].replace(" ", ""));
                User_mass.put(n2[0].replace(" ", ""), Integer.valueOf(n2[1].replace(" ", "")));
            }
        }
        jProgressBar1.setVisible(false);
        jLabel2.setVisible(false);
        jButton4.setEnabled(false);
        jLabel5.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        label1 = new java.awt.Label();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        label2 = new java.awt.Label();
        label3 = new java.awt.Label();
        label4 = new java.awt.Label();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        label5 = new java.awt.Label();
        jTextField5 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        jList1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        label1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        label1.setText("Пользователи");

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/panel/image/action_add_16xLG.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/panel/image/action_Cancel_16xLG.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        label2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        label2.setText("ID");

        label3.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        label3.setText("Колличество собранных друзей");

        label4.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        label4.setText("Имя базы");

        jTextField1.setEditable(false);

        jTextField2.setEditable(false);

        jTextField3.setEditable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Выбор сбора"));

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/panel/image/StatusAnnotations_Play_32xMD_color.png"))); // NOI18N
        jButton1.setText("Начать сбор");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Продолжить?");
        jCheckBox1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBox1StateChanged(evt);
            }
        });

        jCheckBox2.setText("С начала?");
        jCheckBox2.setToolTipText("");
        jCheckBox2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBox2StateChanged(evt);
            }
        });

        jLabel1.setText("Кол-во друзей для поиска всех их друзей сбора");

        jTextField4.setText("1500");

        jButton4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/panel/image/StatusAnnotations_Stop_32xMD_color.png"))); // NOI18N
        jButton4.setText("Стоп");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel4.setText("Кол-во кругов для сбора");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jCheckBox1)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBox2))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGap(107, 107, 107)
                            .addComponent(jButton1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel4))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextField4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(122, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jCheckBox2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jCheckBox1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 44, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Найдено...");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/panel/image/Arrow_RedoRetry_16xMD.png"))); // NOI18N
        jButton5.setText("Rename");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        label5.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        label5.setText("Собранных кругов");

        jTextField5.setEditable(false);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Остановка...");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton3))
                                    .addComponent(jButton5))))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(204, 204, 204)
                                .addComponent(jTextField1))
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField5)
                                    .addComponent(jTextField2)
                                    .addComponent(jTextField3)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2))
                            .addComponent(jButton3))
                        .addGap(18, 18, 18)
                        .addComponent(jButton5)
                        .addGap(0, 148, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 19, Short.MAX_VALUE)
                                .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 18, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    public static Connection c;
    public Statement stmt = null;
    public int ii22 = 0;
    public int cnt = 0;
    public static Map<String, Integer> User_mass = new HashMap<String, Integer>() {
    };

    ArrayList<String> massID = new ArrayList<String>();
    static String API_URL = "https://api.vk.com/method/";
    static String method = "friends.get";
    public static String NameDB = "";
    public static String NameSarver = "";
    public static String number_port = "";
    public static String PathExportExcel = "";
    public static String login = "";
    public static String pathGraph = "";
    public static String pass = "";
    public static String path_script = "";
    public static String path_database = "";
    public static int user_select = -1;
    public static boolean stop = false;
    public static boolean is_connect = false;
    public Integer maxnull = 0;
    public static boolean getdata = false;
    public static int circle = 0;
    public static int count_circle = 0;

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

     
        maxnull = 0;
        jLabel3.setText("");

        stop = false;
        massID = new ArrayList<String>();
        Integer ind = jList1.getSelectedIndex();
        if (ind == -1) {
            JOptionPane.showMessageDialog(null, "Выберите пользователя", "", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        String name = (String) listModel.getElementAt(ind);
        NameDB = (String) listModel.getElementAt(ind);
        NameDB += "_VK";
        Integer start_id = User_mass.get(name);
        if (!jCheckBox1.isSelected() && !jCheckBox2.isSelected()) {
            JOptionPane.showMessageDialog(null, "Выберите тип сбора", "", JOptionPane.OK_CANCEL_OPTION);
            return;
        }
        Setting_S setting = new Setting_S();

        setting.setVisible(false);
        setting.dispatchEvent(new WindowEvent(setting, WindowEvent.WINDOW_CLOSING));

        Setting_S.set();
        if (!jTextField4.getText().equals("")) {
            try {
                user_select = Integer.parseInt(jTextField4.getText());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Неверное поле : кол-во друзей", "", JOptionPane.OK_CANCEL_OPTION);
                return;
            }
        }

        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog(null, "Действительно начать?", "Warning", dialogButton);
        if (dialogResult != JOptionPane.YES_OPTION) {
            jButton1.setEnabled(true);
            return;
        }

        try {
            if (!jTextField6.getText().equals("")) {
                if (Integer.valueOf(jTextField6.getText()) <= 0) {
                    JOptionPane.showMessageDialog(null, "Значение в поле Кол-во кругов должно быть больше 0 или отсутствовать", "", JOptionPane.INFORMATION_MESSAGE);
                    jProgressBar1.setIndeterminate(false);
                    return;
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Неверное значение в поле Кол-во кругов", "", JOptionPane.INFORMATION_MESSAGE);
            jProgressBar1.setIndeterminate(false);
            return;
        }

        try {
            if (!jTextField4.getText().equals("")) {
                if (Integer.valueOf(jTextField4.getText()) <= 0) {
                    JOptionPane.showMessageDialog(null, "Значение в поле Кол-во друзей должно быть больше 0 или отсутствовать", "", JOptionPane.INFORMATION_MESSAGE);
                    jProgressBar1.setIndeterminate(false);
                    return;
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Неверное значение в поле Кол-во друзей", "", JOptionPane.INFORMATION_MESSAGE);
            jProgressBar1.setIndeterminate(false);
            return;
        }

        if (jCheckBox1.isSelected()) { //продолжить
            try {

                jProgressBar1.setVisible(true);
                jProgressBar1.setIndeterminate(true);
                String user = login;
                String password = pass;
                String dbUrl = "jdbc:sqlserver://" + NameSarver + ":" + number_port + ";databaseName=master";

                if (!is_connect) {
                    c = DriverManager.getConnection(dbUrl, user, password);
                }
                stmt = c.createStatement();

                //
                //
                ResultSet rselbd = null;
                try {
                    rselbd = stmt.executeQuery("SELECT name, database_id, create_date FROM sys.databases ;");
                } catch (SQLException ex) {
                    Logger.getLogger(GetData.class.getName()).log(Level.SEVERE, null, ex);
                }
                boolean isdb = false;
                try {
                    while (rselbd.next()) {

                        String namedb = rselbd.getString("name");
                        if (namedb != null && namedb.equals(NameDB)) {
                            isdb = true;
                        }
                    }
                    //
                } catch (SQLException ex) {
                    Logger.getLogger(GetData.class.getName()).log(Level.SEVERE, null, ex);
                }

                if (!isdb) {
                    JOptionPane.showMessageDialog(null, "База еще не создана.Можно только начать сначала", "", JOptionPane.INFORMATION_MESSAGE);
                    jProgressBar1.setIndeterminate(false);
                    return;
                }

                GetUserforVK t = new GetUserforVK();

                ResultSet rsel;
                rsel = stmt.executeQuery("Select *From " + NameDB + ".dbo.statistic");

                try {

                    while (rsel.next()) {

                        ii22 = rsel.getInt("number");
                        cnt = rsel.getInt("count");
                    }
                } catch (Exception e) {
                    System.out.println("343");

                }

                rsel = stmt.executeQuery("Select *From " + NameDB + ".dbo.id_to");
                try {

                    while (rsel.next()) {

                        massID.add(rsel.getString("id")); //те что уже собрали
                    }
                } catch (Exception e) {
                    System.out.println("447");

                }

                rsel = stmt.executeQuery("Select *From " + NameDB + ".dbo.circle");
                try {

                    while (rsel.next()) {
                        circle = rsel.getInt("num");
                        count_circle = rsel.getInt("count_circle");
                    }
                } catch (Exception e) {
                    System.out.println("447");

                }

                rsel.close();
                ii22++;

            } catch (SQLException ex) {
                Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Закройте все соединения с базой", "", JOptionPane.INFORMATION_MESSAGE);
                jProgressBar1.setIndeterminate(false);
                return;
            } finally {
            }

            try {
                if (!jTextField6.getText().equals("")) {
                    if (Integer.valueOf(jTextField6.getText()) <= count_circle) {
                        JOptionPane.showMessageDialog(null, "Кол-во кругов для поиска должно быть больше текущего значения", "", JOptionPane.INFORMATION_MESSAGE);
                        jProgressBar1.setIndeterminate(false);
                        return;
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Неверное значение в поле Кол-во кругов", "", JOptionPane.INFORMATION_MESSAGE);
                jProgressBar1.setIndeterminate(false);
                return;
            }

            try {
                if (!jTextField4.getText().equals("")) {
                    if (Integer.valueOf(jTextField4.getText()) <= cnt) {
                        JOptionPane.showMessageDialog(null, "Кол-во друзей для поиска должно быть больше текущего значения", "", JOptionPane.INFORMATION_MESSAGE);
                        jProgressBar1.setIndeterminate(false);
                        return;
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Неверное значение в поле Кол-во друзей", "", JOptionPane.INFORMATION_MESSAGE);
                jProgressBar1.setIndeterminate(false);
                return;
            }

            is_connect = true;
            jButton1.setEnabled(false);
            jLabel2.setVisible(true);
            getdata = true;
            jButton4.setEnabled(true);
            final StartSearch d = new StartSearch();
            ExecutorService exec2 = Executors.newFixedThreadPool(1);
            exec2.submit(new Runnable() {
                @Override
                public void run() {

                    try {
                        while (true) {

                            try {
                                if (stop) {
                                    JOptionPane.showMessageDialog(null, "Готово", "", JOptionPane.INFORMATION_MESSAGE);
                                    break;
                                }
                                if (maxnull == 15000) {
                                    JOptionPane.showMessageDialog(null, "Не удается найти друзей.", "", JOptionPane.INFORMATION_MESSAGE);
                                    return;
                                }
                                System.out.println(new java.util.Date());
                                FileWriter writer5 = new FileWriter(path_script + "log.txt", true);
                                writer5.write(new java.util.Date() + "\n");
                                writer5.close();
                                d.Start();
                            } catch (IOException ex) {
                                Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                    } catch (Exception e) {
                        Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, e);
                    } finally {
                        jButton1.setEnabled(true);
                        getdata = false;
                        NameDB = "";
                        jProgressBar1.setIndeterminate(false);
                        JFrame.jTabbedPane1.setEnabled(true);
                        jButton4.setEnabled(false);
                        jLabel5.setVisible(false);
                    }

                }

            });
            exec2.shutdown();
        }
        if (jCheckBox2.isSelected()) { //начать заново

            try {

                jProgressBar1.setVisible(true);
                jProgressBar1.setIndeterminate(true);

                GetUserforVK t = new GetUserforVK();
                String user = login;
                String password = pass;
                String dbUrl = "jdbc:sqlserver://" + NameSarver + ":" + number_port + ";databaseName=master";

                if (!is_connect) {
                    c = DriverManager.getConnection(dbUrl, user, password);
                }
                is_connect = true;
                stmt = c.createStatement();

                settabl(stmt);
                stmt.executeUpdate("truncate table " + NameDB + ".dbo.BASE_TABLE");
                stmt.executeUpdate("truncate table " + NameDB + ".dbo.ID_JSON");
                stmt.executeUpdate("truncate table " + NameDB + ".dbo.statistic");
                stmt.executeUpdate("truncate table " + NameDB + ".dbo.id_to");
                stmt.executeUpdate("truncate table " + NameDB + ".dbo.circle");

                t.OneSearch(stmt, massID, start_id);
                stmt.executeUpdate("INSERT INTO " + NameDB + ".dbo.statistic VALUES(" + ii22 + "," + 1 + ")");
                ii22 = 1;
                cnt = 2;
                count_circle++;
                circle = ii22;
                stmt.executeUpdate("INSERT INTO " + NameDB + ".dbo.circle VALUES(" + 1 + "," + 1 + ")");
                if (jTextField6.getText().equals("1")) {
                    JOptionPane.showMessageDialog(null, "Готово", "", JOptionPane.INFORMATION_MESSAGE);
                    jProgressBar1.setIndeterminate(false);
                    return;
                }

            } catch (SQLException ex) {
                Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Закройте все соединения с базой", "", JOptionPane.INFORMATION_MESSAGE);
                jProgressBar1.setIndeterminate(false);
                return;
            } catch (IOException ex) {
                Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
            } finally {

            }

            jButton1.setEnabled(false);
            jLabel2.setVisible(true);
            getdata = true;
            jButton4.setEnabled(true);
            final StartSearch d = new StartSearch();
            ExecutorService exec2 = Executors.newFixedThreadPool(1);
            exec2.submit(new Runnable() {
                @Override
                public void run() {

                    try {
                        while (true) {

                            try {
                                if (stop) {
                                    JOptionPane.showMessageDialog(null, "Готово", "", JOptionPane.INFORMATION_MESSAGE);
                                    break;
                                }
                                if (maxnull == 15000) {
                                    System.out.println("maxnull= " + maxnull);
                                    JOptionPane.showMessageDialog(null, "Не удается найти друзей.", "", JOptionPane.INFORMATION_MESSAGE);
                                    jProgressBar1.setIndeterminate(false);
                                    return;
                                }
                                System.out.println(new java.util.Date());
                                FileWriter writer5 = new FileWriter(path_script + "log.txt", true);
                                writer5.write(new java.util.Date() + "\n");
                                writer5.close();
                                d.Start();
                            } catch (IOException ex) {
                                Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                    } catch (Exception e) {
                        Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, e);
                    } finally {
                        jButton1.setEnabled(true);
                        getdata = false;
                        NameDB = "";
                        jProgressBar1.setIndeterminate(false);
                        jButton4.setEnabled(false);
                        jLabel5.setVisible(false);
                    }

                }

            });
            exec2.shutdown();
//            try {
//                exec2.awaitTermination(1, TimeUnit.DAYS);
//            } catch (InterruptedException ex) {
//                System.out.println("370");
//            }
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBox1StateChanged

        if (jCheckBox1.isSelected()) {
            jCheckBox2.setSelected(false);
        }

    }//GEN-LAST:event_jCheckBox1StateChanged

    private void jCheckBox2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBox2StateChanged
        if (jCheckBox2.isSelected()) {
            jCheckBox1.setSelected(false);
        }
    }//GEN-LAST:event_jCheckBox2StateChanged
    public static String Name = "";
    public static Integer ID = -5;
    public static DefaultListModel listModel = new DefaultListModel();

    //Add User
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        Name = "";
        ID = -5;
        Add_User usr = new Add_User();

        usr.setVisible(true);


    }//GEN-LAST:event_jButton2ActionPerformed

    //Delete User
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        Integer ind = jList1.getSelectedIndex();
        String name = (String) listModel.get(ind);
        if (getdata && NameDB.equals(name + "_VK")) {
            JOptionPane.showMessageDialog(null, "Идет сбор для выбранного пользователя. Невозможно удалить", "", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (ind != -1) {
            listModel.remove(ind);
        }
        User_mass.remove(name);

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked

        if (evt.getClickCount() == 2 && !evt.isConsumed()) {
            evt.consume();
            //handle double click event.

            if (GetData.getdata) {
                JOptionPane.showMessageDialog(null, "Идет сбор.Дождитесь", "", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            Setting_S setting = new Setting_S();

            setting.setVisible(false);
            setting.dispatchEvent(new WindowEvent(setting, WindowEvent.WINDOW_CLOSING));

            Setting_S.set();

            Integer ind = jList1.getSelectedIndex();
            if (ind == -1) {
                return;
            }
            String name = (String) listModel.getElementAt(ind);
            jTextField1.setText(User_mass.get(name).toString());
            String user = login;
            String password = pass;
            String dbUrl = "jdbc:sqlserver://" + NameSarver + ":" + number_port + ";databaseName=master";

            if (!is_connect) {
                try {
                    c = DriverManager.getConnection(dbUrl, user, password);
                } catch (SQLException ex) {
                    Logger.getLogger(GetData.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, "Не удалось установить соединение с базой", "", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
            }
            NameDB = (String) listModel.getElementAt(ind);
            NameDB += "_VK";

            try {
                stmt = c.createStatement();
            } catch (SQLException ex) {
                Logger.getLogger(GetData.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Не удалось установить соединение с базой", "", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            //
            ResultSet rselbd = null;
            try {
                rselbd = stmt.executeQuery("SELECT name, database_id, create_date FROM sys.databases ;");
            } catch (SQLException ex) {
                Logger.getLogger(GetData.class.getName()).log(Level.SEVERE, null, ex);
            }
            boolean isdb = false;
            try {
                while (rselbd.next()) {

                    String namedb = rselbd.getString("name");
                    if (namedb != null && namedb.equals(NameDB)) {
                        isdb = true;
                    }
                }
                //
            } catch (SQLException ex) {
                Logger.getLogger(GetData.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (!isdb) {
//                JOptionPane.showMessageDialog(null, "База еще не создана.Отобразить данные не возможно", "", JOptionPane.INFORMATION_MESSAGE);
                jTextField2.setText("0");
                jTextField5.setText("0");
                jTextField3.setText(name + "_VK");
                return;
            }

            ResultSet rsel = null;
            try {
                rsel = stmt.executeQuery("Select *From " + NameDB + ".dbo.statistic");
            } catch (SQLException ex) {
                Logger.getLogger(GetData.class.getName()).log(Level.SEVERE, null, ex);
            }
            int count = 0;
            try {

                while (rsel.next()) {
                    count = rsel.getInt("count");
                }
            } catch (Exception e) {
                System.out.println("343");

            }
            jTextField2.setText(String.valueOf(count));
            jTextField3.setText(name + "_VK");

            try {
                rsel = stmt.executeQuery("Select *From " + NameDB + ".dbo.circle");
            } catch (SQLException ex) {
                Logger.getLogger(GetData.class.getName()).log(Level.SEVERE, null, ex);
            }
            count = 0;
            try {

                while (rsel.next()) {
                    count = rsel.getInt("count_circle");
                }
            } catch (Exception e) {
                System.out.println("343");

            }

            jTextField5.setText(String.valueOf(count));

        }
    }//GEN-LAST:event_jList1MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog(null, "Действительно остановить?", "Warning", dialogButton);
        if (dialogResult != JOptionPane.YES_OPTION) {

            return;
        } else {

        }

        stop = true;
        jLabel5.setVisible(true);

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        Integer ind = jList1.getSelectedIndex();
        if (ind == -1) {
            return;
        }
        String name = (String) listModel.get(ind);
        if (getdata && NameDB.equals(name + "_VK")) {
            JOptionPane.showMessageDialog(null, "Идет сбор для выбранного пользователя. Невозможно переименовать", "", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        NameDB = (String) listModel.getElementAt(ind);
        RemoveNameUser rm = new RemoveNameUser();
        rm.setVisible(true);


    }//GEN-LAST:event_jButton5ActionPerformed

    public class StartSearch {

        public void Start() throws IOException {
            try {

                GetUserforVK tnew = new GetUserforVK();
                Calendar SaveData = Calendar.getInstance();
                ResultSet r1 = null;
                ResultSet prom = null;
                Boolean isprom = false;
                ArrayList<String> massidvr = new ArrayList<String>();
                ArrayList<String> massidvrnew = new ArrayList<String>();

                try {
                    massidvr = new ArrayList<String>();
                    r1 = stmt.executeQuery("select * from " + NameDB + ".dbo.BASE_TABLE WHERE (num=" + ii22 + ")");

                } catch (Exception e) {
                    System.out.println("132");
                }

                try {

                    while (r1.next()) {

                        massidvr.add(r1.getString("parent"));

                    }
                } catch (Exception e) {
                    System.out.println("183");
                    // Logger.getLogger(JavaApplication5.class.getName()).log(Level.SEVERE, null, e);

                }

                r1.close();
                vr(SaveData, "выбор ii2= " + ii22 + " parent составил= ");
                if (massidvr.size() == 0) {
                    System.out.println("mass=0");
                    ++ii22;
                    maxnull++;
                    return;
                }
                maxnull = 0;
                SaveData = Calendar.getInstance();
                ConcurrentHashMap<String, Boolean> msgBoolean = new ConcurrentHashMap<String, Boolean>();
                vibjsbool v = new vibjsbool();
                //  v.dell(massidvr, stmt, msgBoolean);
                System.out.println("msddID size= " + massID.size());
                for (String id : massidvr) {

                    if (massID.contains(id.replace("'", ""))) {
                        continue;
                    }
                    massidvrnew.add(id);
                }
                vr(SaveData, "1) massidvr.size()= " + massidvr.size() + " massidvrnew.size()= " + massidvrnew.size() + " составил= ");

                DivisionSearchJson t = new DivisionSearchJson();
                t.dell(massidvrnew);

                String string = tnew.SearchMain(stmt, ii22, cnt, massidvrnew, massID);

                cnt = Integer.parseInt(string);
                System.out.println("COUNT= " + cnt + "\n");
                FileWriter writer5 = new FileWriter(path_script + "log.txt", true);
                writer5.write("COUNT= " + cnt + "\n");
                writer5.close();

                if (ii22 >= circle) {
                    count_circle++;
                    ResultSet max = null;
                    max = stmt.executeQuery("select MAX(num) as [max] from " + NameDB + ".dbo.BASE_TABLE");
                    while (max.next()) {

                        circle = max.getInt("max");

                    }
                    stmt.executeUpdate("INSERT INTO " + NameDB + ".dbo.circle VALUES(" + circle + "," + count_circle + ")");
                }

                ++ii22;

                jLabel3.setText(String.valueOf(cnt));
                if (user_select > 0 && user_select <= cnt) {
                    stop = true;
                }
                if (jTextField6.getText().equals(String.valueOf(count_circle))) {
                    stop = true;
                }
            } catch (SQLException ex) {
                Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
            }
        }
    };

    public class vibjsbool {

        public void dell(ArrayList<String> massidvr, Statement stmt, ConcurrentHashMap<String, Boolean> msgBoolean) throws SQLException {
            try {

                for (String el : massidvr) {
                    if (massID.contains(el)) {
                        msgBoolean.put(el, true);
                    }

                }

            } catch (Exception ex) {
                System.out.println("258 проверка были ли, запрос where");
            } finally {

            }
        }
    }

    public class DivisionSearchJson {

        public void dell(ArrayList<String> massidvr) throws SQLException {
            try {
                ArrayList<String> one = new ArrayList<String>();
                ArrayList<String> two = new ArrayList<String>();
                ArrayList<String> three = new ArrayList<String>();
                ArrayList<String> tho = new ArrayList<String>();
                ArrayList<String> fife = new ArrayList<String>();
                ArrayList<String> seven = new ArrayList<String>();
                int pdc = 0;
                for (String s : massidvr) {

                    if (pdc < 1000) {
                        one.add(s);
                    }
                    if (pdc >= 1000 && pdc < 2000) {
                        two.add(s);
                    }
                    if (pdc >= 2000 && pdc < 3000) {
                        three.add(s);
                    }
                    if (pdc >= 3000 && pdc < 4000) {
                        tho.add(s);
                    }
                    if (pdc >= 4000 && pdc < 5000) {
                        fife.add(s);
                    }
                    if (pdc >= 5000 && pdc < 6000) {
                        seven.add(s);
                    }
                    pdc++;

                }
                SearchFriendsJson dt = new SearchFriendsJson();

                ConcurrentSkipListSet<String> err = new ConcurrentSkipListSet<String>();
                if (one.size() > 0) {

                    dt.searchfrend_json(one, stmt, err);
                }
                if (two.size() > 0) {

                    dt.searchfrend_json(two, stmt, err);
                }
                if (three.size() > 0) {

                    dt.searchfrend_json(three, stmt, err);
                }
                if (tho.size() > 0) {

                    dt.searchfrend_json(tho, stmt, err);
                }
                if (fife.size() > 0) {

                    dt.searchfrend_json(fife, stmt, err);
                }
                if (seven.size() > 0) {

                    dt.searchfrend_json(seven, stmt, err);
                }

                one = new ArrayList<String>();
                two = new ArrayList<String>();
                three = new ArrayList<String>();
            } finally {

            }
        }

    }

    public class SearchFriendsJson {

        public void searchfrend_json(ArrayList<String> massidvr, Statement stmt, final ConcurrentSkipListSet<String> err) throws SQLException {

            try {
                final ConcurrentHashMap msg = new ConcurrentHashMap<>();
                Calendar SaveData = Calendar.getInstance();
                ExecutorService exec = Executors.newFixedThreadPool(10);

                try {

                    for (final String o : massidvr) {
                        exec.submit(new Runnable() {
                            @Override
                            public void run() {
                                URL url2 = null;
                                //if (!listid.contains(o)) {

                                try {
                                    url2 = new URL(API_URL + method + "?uid=" + o.replace("'", "") + "&fields=sex,bdate,city,country&name_case=nom&count&offset=0&lid&order=hints");
                                } catch (MalformedURLException ex) {
                                    System.out.println("163");
                                    //  Logger.getLogger(JavaApplication5.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                BufferedReader reader = null;
                                try {
                                    reader = new BufferedReader(new InputStreamReader(url2.openStream()));
                                    String json = reader.readLine();
                                    reader.close();

                                    json = json.replace("{\"response\":[", "").replace("]}", "");
                                    msg.put(o, json);
                                    json = new String();
                                    // System.out.println(msg.size());
                                } catch (IOException ex) {
                                    System.out.println("171");
                                    err.add(o);
                                    // Logger.getLogger(JavaApplication5.class.getName()).log(Level.SEVERE, null, ex);
                                }

                            }

                        });

                    }
                } finally {

                    exec.shutdown();
                    try {
                        exec.awaitTermination(1, TimeUnit.DAYS);
                    } catch (InterruptedException ex) {
                        System.out.println("203");
                    }
                }

                if (err.size() > 1) {
                    ArrayList<String> massidvrnew = new ArrayList<String>();
                    for (String ow : err) {
                        massidvrnew.add(ow);
                    }
                    Reiterative(massidvrnew, msg);
                }

                vr(SaveData, "2) поиск в net = " + massidvr.size() + " составил= ");

                SaveData = Calendar.getInstance();
                ArrayList<String> povt = new ArrayList<String>();
                try (FileWriter writer = new FileWriter(path_script + "jsn.txt", false)) {

                    Iterator iterator2 = msg.keySet().iterator();
                    while (iterator2.hasNext()) {
                        Object key = iterator2.next();
                        if (povt.contains(((String) key).replace("'", ""))) {
                            continue;
                        }
                        povt.add(((String) key).replace("'", ""));
                        writer.write(((String) key).replace("'", "") + "," + "'" + msg.get(key) + "'" + "6744782723371285125003");
                    }
                    writer.close();
                    //  lst = new ConcurrentSkipListSet<>();
                    //  msg = new ConcurrentHashMap<>();
                } catch (Exception ex) {
                    System.out.println("225");
                    System.out.println(ex.getMessage());
                }

                try {
                    String g = "BULK INSERT " + NameDB + ".dbo.ID_JSON FROM" + "'" + path_script + "jsn.txt' WITH(FIELDTERMINATOR = ',',ROWTERMINATOR = '6744782723371285125003')";
                    stmt.executeUpdate(g);
                } catch (Exception ex) {
                    System.out.println("358 errinsert n1");
                    Reinserting();
                }

                vr(SaveData, "3) добавление json в файл и в базу ID_JSON= " + massidvr.size() + " msg_size = " + msg.size() + " составил= ");
            } finally {

            }
        }

        public void Reinserting() {

            try {
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(null, "Вставить повторно json в базу?", "Warning", dialogButton);
                if (dialogResult == JOptionPane.YES_OPTION) {
                    try {

                        String g = "BULK INSERT " + NameDB + ".dbo.ID_JSON FROM" + "'" + path_script + "jsn.txt' WITH(FIELDTERMINATOR = ',',ROWTERMINATOR = '6744782723371285125003')";
                        stmt.executeUpdate(g);

                    } catch (Exception ex) {
                        System.out.println("381 errinsert n1");
                        Reinserting();
                    }
                } else {
                }
            } finally {

            }

        }

        public void Reiterative(ArrayList<String> massidvr, ConcurrentHashMap msg) {

            for (final String o : massidvr) {

                URL url2 = null;
                //if (!listid.contains(o)) {

                try {
                    url2 = new URL(API_URL + method + "?uid=" + o.replace("'", "") + "&fields&name_case=nom&count&offset=0&lid&order=hints");
                } catch (MalformedURLException ex) {
                    System.out.println("416");
                    // Logger.getLogger(JavaApplication5.class.getName()).log(Level.SEVERE, null, ex);
                }
                BufferedReader reader = null;
                try {
                    reader = new BufferedReader(new InputStreamReader(url2.openStream()));
                    String json = reader.readLine();
                    reader.close();

                    json = json.replace("{\"response\":[", "").replace("]}", "");
                    msg.put(o, json);
                    json = new String();
                } catch (IOException ex) {
                    System.out.println("437");
                    //  err.add(o);
                    //  Logger.getLogger(JavaApplication5.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

        }

    }

    public void settabl(Statement stmt) throws SQLException {

        stmt.executeUpdate("USE MASTER;"
                + " IF DB_ID('" + NameDB + "') IS NOT NULL"
                + " DROP DATABASE " + NameDB
                + " CREATE DATABASE " + NameDB
                + " ON PRIMARY (Name=" + NameDB + ",FILENAME=" + "'" + path_database + NameDB + ".mdf',SIZE=1000MB,MAXSIZE=UNLIMITED,FILEGROWTH=290MB)"
                + " LOG ON (NAME=" + NameDB + "_log,FILENAME=" + "'" + path_database + NameDB + "_log.ldf',SIZE=500MB,MAXSIZE=35000MB,FILEGROWTH=200MB)");
        stmt.executeUpdate(
                "USE " + NameDB + "\n"
                + "IF EXISTS(SELECT*FROM sys.tables WHERE NAME='BASE_TABLE')\n"
                + "DROP TABLE BASE_TABLE;\n"
                + "CREATE TABLE BASE_TABLE\n"
                + "(\n"
                + "	id bigint NULL,\n"
                + "	parent text NULL,\n"
                + "	num bigint NULL,\n"
                + "	sex text NULL,\n"
                + "	bdate text NULL,\n"
                + "	city text NULL,\n"
                + "	country text NULL,\n"
                + "	hidden text NULL,\n"
                + "     count_circle int \n"
                + " )\n"
                + "\n"
                + "USE " + NameDB + "\n"
                + "IF EXISTS(SELECT*FROM sys.tables WHERE NAME='statistic')\n"
                + "DROP TABLE statistic;\n"
                + "CREATE TABLE statistic\n"
                + "(\n"
                + "	number bigint NULL,\n"
                + "	count bigint NULL,\n"
                + " )\n"
                + "\n"
                + "USE " + NameDB + "\n"
                + "IF EXISTS(SELECT*FROM sys.tables WHERE NAME='circle')\n"
                + "DROP TABLE circle;\n"
                + "CREATE TABLE circle\n"
                + "(\n"
                + "	num bigint NULL,\n"
                + "	count_circle bigint NULL,\n"
                + " )\n"
                + "\n"
                + " USE " + NameDB + "\n"
                + "IF EXISTS(SELECT*FROM sys.tables WHERE NAME='ID_JSON')\n"
                + "DROP TABLE ID_JSON;\n"
                + "CREATE TABLE ID_JSON\n"
                + "(\n"
                + "	ID bigint NULL,\n"
                + "	JS text NULL,\n"
                + " )"
                + "USE " + NameDB + "\n"
                + "IF EXISTS(SELECT*FROM sys.tables WHERE NAME='id_to')\n"
                + "DROP TABLE id_to;\n"
                + "CREATE TABLE id_to\n"
                + "(\n"
                + "	id bigint NULL,\n"
                + ")");
        stmt.executeUpdate("Exec sp_defaultdb @loginame='" + login + "', @defdb='" + NameDB + "'");
    }

    public void vr(Calendar SaveData, String outp) {

        try {
            FileWriter writer5 = new FileWriter(path_script + "log.txt", true);
            writer5.write(outp);
            System.out.print(outp);

            Calendar CurrentData = Calendar.getInstance();

            Calendar calculate = Calendar.getInstance();
            calculate.setTime(new Date(CurrentData.getTime().getTime() - SaveData.getTime().getTime()));

            System.out.println(calculate.get(Calendar.MINUTE) + ":" + calculate.get(Calendar.SECOND));
            writer5.write(calculate.get(Calendar.MINUTE) + ":" + calculate.get(Calendar.SECOND));
            writer5.write("\n");
            writer5.close();
        } catch (Exception e) {
            System.out.println("391");
        } finally {

        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    public static javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    // End of variables declaration//GEN-END:variables
}
